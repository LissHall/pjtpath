#!/bin/bash

# Xinya HAO (HALL). Version 1.0. 1jun2025.

# Configuration file path
CONFIG_FILE="$HOME/.pjtpath"

# Function to normalize paths by adding single quotes
normalize_path() {
    local path="$1"
    # Remove existing surrounding quotes if present
    path="${path%\'}"
    path="${path#\'}"
    path="${path%\"}"
    path="${path#\"}"
    # Add single quotes around the path
    echo "'$path'"
}

# Function to safely extract path from config
get_path() {
    local name="$1"
    # Extract path with potential quotes
    grep "^$name " "$CONFIG_FILE" | awk '{$1=""; print substr($0,2)}'
}

case "$1" in
    add)
        # Add new path record
        if [ -z "$2" ]; then
            echo "Usage: pjtpath add NAME [PATH]"
            echo "If PATH is omitted, the current directory is used."
            exit 1
        fi
        
        # Prevent reserved name _all
        if [ "$2" = "_all" ]; then
            echo "Error: '_all' is a reserved name and cannot be used"
            exit 1
        fi
        
        # Determine path to store (current directory if none provided)
        if [ -z "$3" ]; then
            raw_path=$(pwd)
            echo "Using current directory: $raw_path"
        else
            raw_path="$3"
        fi
        
        # Normalize path into quoted format
        target_path=$(normalize_path "$raw_path")
        
        # Check if name already exists
        if grep -q "^$2 " "$CONFIG_FILE"; then
            echo "Error: Name '$2' already exists. Use a different name."
            exit 1
        fi
        
        # Verify path exists
        eval_path="${target_path//\'}"  # Remove quotes for validation
        if [ ! -d "$eval_path" ]; then
            echo "Error: Path does not exist or is not a directory: $target_path"
            exit 1
        fi
        
        # Store name and normalized path
        echo "$2 $target_path" >> "$CONFIG_FILE"
        echo "Added: $2 -> $target_path"
        ;;
    
    ls)
        # List all paths
        if [ ! -f "$CONFIG_FILE" ]; then
            echo "No paths recorded."
            exit 0
        fi
        
        # Format output: name -> quoted path
        while read -r line; do
            name="${line%% *}"
            path="${line#* }"
            printf "%-15s -> %s\n" "$name" "$path"
        done < "$CONFIG_FILE"
        ;;
    
    cd)
        # Change to specified path
        if [ -z "$2" ]; then
            echo "Usage: pjtpath cd NAME"
            exit 1
        fi
        
        # Prevent reserved name _all
        if [ "$2" = "_all" ]; then
            echo "Error: '_all' is a reserved command, not a path name"
            exit 1
        fi
        
        # Extract path from config
        target_path=$(get_path "$2")
        
        if [ -z "$target_path" ]; then
            echo "Error: No path found for name: $2"
            exit 1
        fi
        
        # Remove quotes for validation and cd
        eval_path="${target_path//\'}"
        
        # Validate path
        if [ ! -d "$eval_path" ]; then
            echo "Error: Invalid path: $target_path"
            exit 1
        fi
        
        # Execute directory change and print quoted path
        cd "$eval_path" || exit
        echo "Changed to directory: $target_path"
        ;;
    
    rm)
        # Delete specified path record
        if [ -z "$2" ]; then
            echo "Usage: pjtpath rm NAME"
            echo "  NAME    - Delete specific path record"
            echo "  _all    - Delete ALL stored paths (requires confirmation)"
            echo ""
            echo "Available names:"
            [ -f "$CONFIG_FILE" ] && awk '{print "  " $1}' "$CONFIG_FILE"
            exit 1
        fi
        
        # Handle '_all' command
        if [ "$2" = "_all" ]; then
            if [ ! -f "$CONFIG_FILE" ] || [ ! -s "$CONFIG_FILE" ]; then
                echo "No paths to remove - storage is empty."
                exit 0
            fi
            
            # Show warning and get confirmation
            echo "WARNING: This will remove ALL stored paths!"
            read -p "Are you sure? Type 'yes' to confirm: " confirmation
            
            if [ "$confirmation" = "yes" ]; then
                # Remove config file
                rm -f "$CONFIG_FILE"
                echo "Removed ALL stored paths."
            else
                echo "Operation cancelled. No paths were removed."
            fi
            exit 0
        fi
        
        # Prevent removal of reserved name _all (though it shouldn't exist)
        if [ "$2" = "_all" ]; then
            echo "Error: '_all' is a reserved command and cannot be removed"
            exit 1
        fi
        
        # Existing single record removal
        # Check if name exists
        if ! grep -q "^$2 " "$CONFIG_FILE"; then
            echo "Error: Name '$2' not found in records"
            exit 1
        fi
        
        # Create temp file and remove matching line
        temp_file=$(mktemp)
        grep -v "^$2 " "$CONFIG_FILE" > "$temp_file"
        
        # Replace original config file
        mv "$temp_file" "$CONFIG_FILE"
        
        echo "Removed: $2"
        ;;
    
    *)
        # Display help information
        echo "Project Path Manager - Usage:"
        echo "  pname add NAME [PATH]   # Add new path (uses current dir if PATH omitted)"
        echo "  pname ls                # List all paths"
        echo "  . pname cd NAME         # Change to specified path (prints path in quotes)"
        echo "  pname rm NAME           # Delete specific path record"
        echo "  pname rm _all           # Delete ALL stored paths (requires confirmation)"
        ;;
esac
