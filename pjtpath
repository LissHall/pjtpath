#!/bin/bash

# Xinya HAO (HALL). Version 1.0. 1jun2025.

# Configuration file path
CONFIG_FILE="$HOME/.pjtpath"

case "$1" in
    add)
        # Add new path record
        if [ -z "$2" ]; then
            echo "Usage: pjtpath add NAME [PATH]"
            echo "If PATH is omitted, the current directory is used."
            exit 1
        fi
        
        # Determine path to store (current directory if none provided)
        if [ -z "$3" ]; then
            target_path=$(pwd)
            echo "Using current directory: '$target_path'"
        else
            target_path="$3"
        fi
        
        # Check if name already exists
        if grep -q "^$2 " "$CONFIG_FILE"; then
            echo "Error: Name '$2' already exists. Use a different name."
            exit 1
        fi
        
        # Verify path exists
        if [ ! -d "$target_path" ]; then
            echo "Error: Path does not exist or is not a directory: '$target_path'"
            exit 1
        fi
        
        # Store name and path (without extra quotes)
        echo "$2 $target_path" >> "$CONFIG_FILE"
        echo "Added: $2 -> '$target_path'"
        ;;
    
    ls)
        # List all paths
        if [ ! -f "$CONFIG_FILE" ]; then
            echo "No paths recorded."
            exit 0
        fi
        
        # Format output: name -> path
        awk '{printf "%-15s -> %s\n", $1, substr($0, index($0,$2))}' "$CONFIG_FILE"
        ;;
    
    cd)
        # Change to specified path
        if [ -z "$2" ]; then
            echo "Usage: pjtpath cd NAME"
            exit 1
        fi
        
        # Safely extract path (handles spaces)
        target_path=$(grep "^$2 " "$CONFIG_FILE" | awk '{$1=""; print substr($0,2)}')
        
        if [ -z "$target_path" ]; then
            echo "Error: No path found for name: $2"
            exit 1
        fi
        
        # Validate path
        if [ ! -d "$target_path" ]; then
            echo "Error: Invalid path: '$target_path'"
            exit 1
        fi
        
        # Execute directory change and print path in single quotes
        cd "$target_path" || exit
        echo "Changed to directory: '$target_path'"
        ;;
    
    rm)
        # Delete specified path record
        if [ -z "$2" ]; then
            echo "Usage: pjtpath rm NAME"
            echo "Available names:"
            [ -f "$CONFIG_FILE" ] && awk '{print "  " $1}' "$CONFIG_FILE"
            exit 1
        fi
        
        # Check if name exists
        if ! grep -q "^$2 " "$CONFIG_FILE"; then
            echo "Error: Name '$2' not found in records"
            exit 1
        fi
        
        # Create temp file and remove matching line
        temp_file=$(mktemp)
        grep -v "^$2 " "$CONFIG_FILE" > "$temp_file"
        
        # Replace original config file
        mv "$temp_file" "$CONFIG_FILE"
        
        echo "Removed: $2"
        ;;
    
    *)
        # Display help information
        echo "Project Path Manager - Usage:"
        echo "  pjtpath add NAME [PATH]   # Add new path (uses current dir if PATH omitted)"
        echo "  pjtpath ls                # List all paths"
        echo "  pjtpath cd NAME           # Change to specified path (prints path in quotes)"
        echo "  pjtpath rm NAME           # Delete specified path record"
        exit 1
        ;;
esac
